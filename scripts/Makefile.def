shell = /bin/sh

# We want to disable the default rules. It's not c/c++ anyway
.SUFFIXES:

# Legacy settings for project type
ifeq ($(PROJECT_TYPE),NFO)
USE_NFO := 1
endif
ifeq ($(PROJECT_TYPE),NML)
USE_NML := 1
endif

################################################################
# Programme definitions / search paths
################################################################
# Build parameters and programmes
NFORENUM_FLAGS ?= $(shell [ `$(NFORENUM) -s -v 2>/dev/null | wc -l ` -eq 1 ] && echo "-s" || echo "")
NFO_WARN_LEVEL ?= 4 
GRFCODEC_FLAGS ?= $(shell $(GRFCODEC) -s -v >/dev/null 2>/dev/null && echo "-s" || echo "") -e -p 2 -c
CATCODEC_FLAGS ?= -e
TAR_FLAGS      ?= -cf
ZIP_FLAGS      ?= -r -q
SRCZIP_FLAGS   ?=
BZIP_FLAGS     ?= -k9f
CC_FLAGS       ?= -C -E - <
MAKE_FLAGS     ?=
UNIX2DOS_FLAGS ?= $(shell [ -n $(UNIX2DOS) ] && $(UNIX2DOS) -q --version 2>/dev/null && echo "-q" || echo "")
NML_FLAGS      ?=
# OSX has nice extended file attributes which create their own file within tars. We don't want those, thus don't copy them
CP_FLAGS       ?= $(shell [ "$(OSTYPE)" = "Darwin" ] && echo "-rfX" || echo "-rf")


NFORENUM       ?= nforenum
GRFCODEC       ?= grfcodec
CATCODEC       ?= catcodec
TAR            ?= tar
ZIP            ?= zip
SRCZIP         ?= gzip
BZIP           ?= bzip2
CC             ?= gcc
AWK            ?= awk
HG             ?= hg
MAKE           ?= make
UNIX2DOS       ?= $(shell [ `which unix2dos 2>/dev/null` ] && echo "unix2dos" || echo "")
# Macs have a different md5 command than linux or mingw envirnoment:
MD5SUM         ?= $(shell [ "$(OSTYPE)" = "Darwin" ] && echo "md5 -r" || echo "md5sum")
NML            ?= nmlc

SCRIPT_DIR     ?= scripts
SRC_DIR        ?= sprites
NFO_DIR        ?= $(SRC_DIR)/nfo
DOC_DIR        ?= docs
ifdef USE_NML
LANG_DIR       ?= lang
endif

PROJECT_NAME := $(basename $(firstword $(TARGET_FILES)))
OSTYPE:=$(shell uname -s)
ifeq ($(OSTYPE),Linux)
INSTALL_DIR?=$(HOME)/.openttd/data/$(PROJECT_NAME)
else
ifeq ($(OSTYPE),Darwin)
INSTALL_DIR?=$(HOME)/Documents/OpenTTD/data/$(PROJECT_NAME)
else
ifeq ($(shell echo "$(OSTYPE)" | cut -d_ -f1),MINGW32)
# If CC has been set to the default implicit value (cc), check if it can be used. Otherwise use a saner default.
ifeq "$(origin CC)" "default"
	CC=$(shell which cc 2>/dev/null && echo "cc" || echo "gcc")
endif
WIN_VER = $(shell echo "$(OSTYPE)" | cut -d- -f2 | cut -d. -f1)
ifeq ($(WIN_VER),5)
	INSTALL_DIR?=C:\Documents and Settings\All Users\Shared Documents\OpenTTD\data\$(PROJECT_NAME)
else
	INSTALL_DIR?=C:\Users\Public\Documents\OpenTTD\data\$(PROJECT_NAME)
endif
else
INSTALL_DIR?=
endif
endif
endif
DOCDIR ?= $(INSTALL_DIR)

# Previous versions used INSTALLDIR instead of INSTALL_DIR. Use the previous version,
# if supplied via command line parameter:

ifdef INSTALLDIR
INSTALL_DIR = $(INSTALLDIR)
endif

# file extentions which indicate plain text source files, 
# parsable by a text editor (SRC) and binary source files (INC)
ifdef USE_NFO
	FILE_SRC_EXTENSIONS ?= pnfo tnfo
	FILE_INC_EXTENSIONS ?= wav pcx
endif
ifdef USE_NML
	FILE_SRC_EXTENSIONS ?= pnml nml tnml
	FILE_INC_EXTENSIONS ?= wav pcx png
	TAG_FILENAME := custom_tags.txt
	LANG_FILES := $(shell ls $(LANG_DIR)/*.lng)
endif

################################################################
# Get the Repository revision, tags and the modified status
# The displayed name within OpenTTD / TTDPatch
# Looks like either
# a nightly build:                 GRF's Name nightly-r51
# a release build (taged version): GRF's Name 0.1
################################################################
# This must be conditional declarations, or building from the tar.gz won't work anymore
DEFAULT_BRANCH_NAME ?= nightly
REPO_REVISION  ?= $(shell $(HG) id -n | cut -d+ -f1)
REPO_MODIFIED  ?= $(shell [ "`$(HG) id | cut -c13`" = "+" ] && echo "M" || echo "")
REPO_BRANCH    ?= $(shell $(HG) id -b | sed "s/default/$(DEFAULT_BRANCH_NAME)/")
REPO_TAGS      ?= $(shell $(HG) id -t | grep -v "tip")
REPO_FILES_CMD ?= $(HG) --config "ui.slash=1" st -A | grep -v  "^I" | grep -v "^?" | grep -v "^R" | grep -v "^\!" | cut -d\  -f2
REPO_FILES     ?= $(shell $(REPO_FILES_CMD))
REPO_DIRS      ?= $(shell for i in $(REPO_FILES); do dirname $$i; done | sort | uniq)
REPO_TITLE     ?= $(REPO_NAME) $(shell [ -n "$(REPO_TAGS)" ] && echo $(REPO_TAGS)$(REPO_MODIFIED) || echo $(REPO_BRANCH)-r$(REPO_REVISION)$(REPO_MODIFIED))

################################################################
# Rules on how to generate filenames. Usually no need to change
################################################################
# Define how the displayed name and the filename of the bundled grf shall look like:
# The result will either be
# nightly build:                   mynewgrf-nightly-r51
# a release build (tagged version): mynewgrf-0.1
# followed by an M, if the source repository is not a clean version.

VPATH =
VPATH = $(REPO_DIRS)

FILENAME_STUB      := $(firstword $(basename $(TARGET_FILES)))
DIR_BASE           := $(FILENAME_STUB)-
VERSION_STRING     := $(shell [ -n "$(REPO_TAGS)" ] && echo $(REPO_TAGS)$(REPO_MODIFIED) || echo $(REPO_BRANCH)-r$(REPO_REVISION)$(REPO_MODIFIED))
DIR_NAME           := $(shell [ -n "$(REPO_TAGS)" ] && echo $(DIR_BASE)$(VERSION_STRING) || echo $(DIR_BASE)$(REPO_BRANCH))
VERSIONED_FILENAME := $(DIR_BASE)$(VERSION_STRING)
DIR_NAME_SRC       := $(VERSIONED_FILENAME)-source

TAR_FILENAME       := $(DIR_NAME).tar
BZIP_FILENAME      := $(TAR_FILENAME).bz2
ZIP_FILENAME       := $(VERSIONED_FILENAME).zip
REV_EXTENSION      ?= REV
MD5_FILENAME       := $(DIR_NAME).md5
MD5_SRC_FILENAME   := $(DIR_NAME).check.md5
REV_FILENAME       := $(VERSIONED_FILENAME).$(REV_EXTENSION)
# customly defined tags. Don't change the filename.
FILE_CUSTOM_TAGS   := custom_tags.txt

# replacement tags for the doc files:
REPO_TITLE_DUMMY      ?= {{REPO_TITLE}}
GRF_ID_DUMMY          ?= {{GRF_ID}}
REPO_REVISION_DUMMY   ?= {{REPO_REVISION}}
OUTPUT_FILENAME_DUMMY ?= {{FILENAME}}
GRF_MD5SUM_DUMMY      ?= {{GRF_MD5}}

GRF_FILES          := $(filter %.grf,$(TARGET_FILES))
LICENSE_FILE       ?= $(filter $(DOC_DIR)/license.txt,$(DOC_FILES))
CHANGELOG_FILE     ?= $(filter $(DOC_DIR)/changelog.txt,$(DOC_FILES))

# Directories which to remember when creating a source release
MAIN_DIRS           = $(SRC_DIR) $(DOC_DIR) $(SCRIPT_DIR) $(TEMPLATE_DIR) $(LANG_DIR) $(EXTRA_DIRS)

FILE_SRC_RE        := $(shell echo $(FILE_SRC_EXTENSIONS) | sed -e "s/[[:space:]]/|/g")
FILE_INC_RE        := $(shell echo $(FILE_INC_EXTENSIONS) | sed -e "s/[[:space:]]/|/g")
FILES_NOT_PACK_RE  := "(\.hgignore|\.hgtags|\.hgeol|backup\.push|\.devzone)"

# Make a bit of a guess on which dependency check we should use as default, if not defined otherwise
# mdep doesn't yet work for NML style projects
DEP_CHECK_TYPE     ?=$(shell [ `which python 2>/dev/null` ] && [ -z $(USE_NML) ] && echo "mdep" || echo "normal")

# Remove the @ when you want a more verbose output.
_V ?= @
_E ?= @echo
